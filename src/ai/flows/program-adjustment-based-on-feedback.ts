// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Adjusts an exercise program based on patient feedback.
 *
 * - adjustProgramBasedOnFeedback - A function that adjusts the program based on feedback.
 * - AdjustProgramBasedOnFeedbackInput - The input type for the adjustProgramBasedOnFeedback function.
 * - AdjustProgramBasedOnFeedbackOutput - The return type for the adjustProgramBasedOnFeedback function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const AdjustProgramBasedOnFeedbackInputSchema = z.object({
  programId: z.string().describe('The ID of the exercise program to adjust.'),
  patientId: z.string().describe('The ID of the patient providing feedback.'),
  date: z.string().describe('The date of the feedback.'),
  painLevel: z
    .number()
    .min(0)
    .max(10)
    .describe('The average pain level reported by the patient (0-10).'),
  difficultyLevel: z
    .number()
    .min(0)
    .max(10)
    .describe('The difficulty level reported by the patient (0-10).'),
  adherence: z
    .number()
    .min(0)
    .max(100)
    .describe('The adherence to the program reported by the patient (0-100%).'),
  freeComment: z
    .string()
    .describe('Any additional comments provided by the patient.'),
});

export type AdjustProgramBasedOnFeedbackInput = z.infer<
  typeof AdjustProgramBasedOnFeedbackInputSchema
>;

const AdjustProgramBasedOnFeedbackOutputSchema = z.object({
  adjustedProgram: z
    .string()
    .describe('A description of how the program should be adjusted.'),
});

export type AdjustProgramBasedOnFeedbackOutput = z.infer<
  typeof AdjustProgramBasedOnFeedbackOutputSchema
>;

export async function adjustProgramBasedOnFeedback(
  input: AdjustProgramBasedOnFeedbackInput
): Promise<AdjustProgramBasedOnFeedbackOutput> {
  return adjustProgramBasedOnFeedbackFlow(input);
}

const adjustProgramBasedOnFeedbackPrompt = ai.definePrompt({
  name: 'adjustProgramBasedOnFeedbackPrompt',
  input: {
    schema: z.object({
      programId: z.string().describe('The ID of the exercise program.'),
      patientId: z.string().describe('The ID of the patient.'),
      date: z.string().describe('The date of the feedback.'),
      painLevel: z
        .number()
        .describe('The average pain level reported by the patient (0-10).'),
      difficultyLevel: z
        .number()
        .describe('The difficulty level reported by the patient (0-10).'),
      adherence: z
        .number()
        .describe('The adherence to the program reported by the patient (0-100%).'),
      freeComment: z
        .string()
        .describe('Any additional comments provided by the patient.'),
    }),
  },
  output: {
    schema: z.object({
      adjustedProgram: z
        .string()
        .describe('A description of how the program should be adjusted.'),
    }),
  },
  prompt: `You are an expert physiotherapist. A patient has provided the following feedback on their exercise program. Based on this feedback, suggest how the program should be adjusted to improve patient comfort and results.

Patient ID: {{{patientId}}}
Program ID: {{{programId}}}
Date: {{{date}}}
Pain Level: {{{painLevel}}} / 10
Difficulty Level: {{{difficultyLevel}}} / 10
Adherence: {{{adherence}}}%
Comments: {{{freeComment}}}

Suggest adjustments to the program:
`,
});

const adjustProgramBasedOnFeedbackFlow = ai.defineFlow<
  typeof AdjustProgramBasedOnFeedbackInputSchema,
  typeof AdjustProgramBasedOnFeedbackOutputSchema
>(
  {
    name: 'adjustProgramBasedOnFeedbackFlow',
    inputSchema: AdjustProgramBasedOnFeedbackInputSchema,
    outputSchema: AdjustProgramBasedOnFeedbackOutputSchema,
  },
  async input => {
    const {output} = await adjustProgramBasedOnFeedbackPrompt(input);
    return output!;
  }
);
