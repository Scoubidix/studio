// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Patient chatbot flow for providing general advice on exercises, pain management, and common mistakes.
 *
 * - patientChatbot - A function that handles the patient chatbot interactions.
 * - PatientChatbotInput - The input type for the patientChatbot function.
 * - PatientChatbotOutput - The return type for the patientChatbot function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const PatientChatbotInputSchema = z.object({
  question: z.string().describe('The question asked by the patient.'),
});
export type PatientChatbotInput = z.infer<typeof PatientChatbotInputSchema>;

const PatientChatbotOutputSchema = z.object({
  answer: z.string().describe('The answer to the patient question.'),
});
export type PatientChatbotOutput = z.infer<typeof PatientChatbotOutputSchema>;

export async function patientChatbot(input: PatientChatbotInput): Promise<PatientChatbotOutput> {
  return patientChatbotFlow(input);
}

const patientChatbotPrompt = ai.definePrompt({
  name: 'patientChatbotPrompt',
  input: {
    schema: z.object({
      question: z.string().describe('The question asked by the patient.'),
    }),
  },
  output: {
    schema: z.object({
      answer: z.string().describe('The answer to the patient question.'),
    }),
  },
  prompt: `You are a helpful assistant for physiotherapy patients. Respond to their questions with general advice, but do not provide medical diagnoses or specific medical advice. Focus on exercises, pain management, and common mistakes. Be conversational and friendly in your responses.\n\nQuestion: {{{question}}}`,
});

const patientChatbotFlow = ai.defineFlow<
  typeof PatientChatbotInputSchema,
  typeof PatientChatbotOutputSchema
>({
  name: 'patientChatbotFlow',
  inputSchema: PatientChatbotInputSchema,
  outputSchema: PatientChatbotOutputSchema,
},
async input => {
  const {output} = await patientChatbotPrompt(input);
  return output!;
});